<?php
/**
 * View: Top Bar
 *
 * Override this template in your own theme by creating a file at:
 * [your-theme]/tribe/events/v2/list/top-bar.php
 *
 * See more documentation about our views templating system.
 *
 * @link http://evnt.is/1aiy
 *
 * @version 5.0.1
 *
 */
?>

<div class="tribe-events-c-top-bar tribe-events-header__top-bar">

    <div class="cust_cat_selector">

    <div class="select-wrapper">
        <select name="event_category" id="event_category">
            <option value="all" selected hidden>Type of Meeting &#9660;</option>
            <?php
            // Fetch the terms for the 'tribe_events_cat' taxonomy
            $event_categories = get_terms(array(
                'taxonomy' => 'tribe_events_cat',
                'hide_empty' => false, // Set to true to hide categories not assigned to any posts
            ));

            if (!empty($event_categories) && !is_wp_error($event_categories)) {
                // Iterate through each category and create an option in the dropdown
                foreach ($event_categories as $category) {
                    echo sprintf('<option value="%s">%s</option>', esc_attr($category->slug), esc_html($category->name));
                }
            } else {
                // Fallback option if no categories are found
                echo '<option value="">No Categories Found</option>';
            }
            ?>
        </select>
    </div>
    <div class="custom-calendar">
        <button id="toggle-picker-button" onclick="togglePicker()"><span style="margin-right: 40px">Month and Year</span> <i class="fas fa-calendar-alt"></i>
</button>
    </div>

    <div class="custom-buttons">
        <button id="filter_events_button" type="button">Filter</button>
        <button id="clear_filters_button" type="button">Clear</button>
    </div>
    </div>
    <div id="month-picker-container" class="month-picker-container">
        <div class="month-picker-header">
            <button onclick="changeYear(-1)">&#60;</button>
            <span id="year">2024</span>
            <button onclick="changeYear(1)">&#62;</button>
        </div>
        <div id="month-picker" class="month-picker">
            <!-- Months will be generated by JavaScript -->
        </div>
    </div>   
</div>

<!----Query for month ----->

<script>
    let selectedYear = new Date().getFullYear();
    let selectedMonth = null;
    const monthNames = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];

    function generateMonths() {
        const monthPickerDiv = document.getElementById("month-picker");
        monthPickerDiv.innerHTML = ""; // Clear the previous months
        monthNames.forEach((month, index) => {
            const monthDiv = document.createElement("div");
            monthDiv.textContent = month;
            monthDiv.className = "month";
            monthDiv.onclick = function () {
                selectMonth(index);
            };
            if (selectedMonth === index) {
                monthDiv.classList.add("active");
            }
            monthPickerDiv.appendChild(monthDiv);
        });
    }

    function selectMonth(monthIndex) {
    selectedMonth = monthIndex;
    updatePickerButton();
    // Assuming 'fetchEvents' is globally accessible, call it.
    // If 'fetchEvents' is not accessible, this will cause an error.
    window.fetchEvents && window.fetchEvents(); 
    togglePicker(); // Hide the month picker
}

function changeYear(change) {
    selectedYear += change;
    document.getElementById("year").textContent = selectedYear;
    updatePickerButton();
}

function updatePickerButton() {
    let buttonLabel = '<span style="margin-right: 39px;">Month and Year</span><i class="fas fa-calendar-alt"></i>'; // Default button label with icon and margin
    if (selectedMonth !== null) {
        // Update button label with selected month, year, margin, and icon
        buttonLabel = `<span style="margin-right: 39px;">${monthNames[selectedMonth]} ${selectedYear}</span> <i class="fas fa-calendar-alt"></i>`;
    }
    document.getElementById('toggle-picker-button').innerHTML = buttonLabel;
}

function clearSelection() {
    selectedMonth = null; // Reset the month selection
    selectedYear = new Date().getFullYear();
    document.getElementById("year").textContent = selectedYear;
    updatePickerButton();
    generateMonths();
    closePicker();
}


function closePicker() {
    const pickerContainer = document.getElementById("month-picker-container");
    pickerContainer.style.display = 'none'; // Explicitly hide the picker
}


    function togglePicker() {
        const pickerContainer = document.getElementById("month-picker-container");
        pickerContainer.style.display = pickerContainer.style.display === 'block' ? 'none' : 'block';
    }

    // Initialize the months display
    generateMonths();
</script>

<!----Ajax query for category and month ----->
<script type="text/javascript">
    let currentPage = 1; // Set the initial page number
    let totalPages = undefined; // This will be set based on AJAX response
    let hasPastEvents = false; // Declare hasPastEvents in a higher scope
    let moreEvents = false;
    let fetchingPast = false;

jQuery(document).ready(function($) {
    
    function updateButtonStates() {
        // Disable "Previous" button if on the first page
        $('#prev_events_button').prop('disabled', (currentPage === 1 && !hasPastEvents) || fetchingPast)
                                    .css('opacity', ((currentPage === 1 && !hasPastEvents) || fetchingPast) ? 0.5 : 1);

        // If totalPages is not set, we can't determine the state of the "Next" button yet
        const disableNext = totalPages !== undefined && currentPage >= totalPages;
        $('#next_events_button').prop('disabled', disableNext).css('opacity', disableNext ? 0.5 : 1);
    }

    var currentTagName = "<?php
        $current_term = get_queried_object();
        if ( isset( $current_term ) && $current_term instanceof WP_Term ) {
            echo esc_js( $current_term->slug );
        } else {
            echo ''; // Output an empty string if there's no term or it doesn't have a slug
        }
    ?>";

    // Generate the months for the picker
    generateMonths();

    function fetchEvents(page,  fetchPast = false) {
        // Prevent going below page 1
        if (page < 1 && !fetchPast) {
            console.log("No previous events to show.");
            return;
        }
            
        if (fetchPast) {
            fetchingPast = true;
        }
        currentPage = page; // Update the current page

        var category = $('#event_category').val();
        var month = selectedMonth !== null ? selectedMonth + 1 : ''; // +1 because JavaScript months are 0 indexed
        var year = selectedYear;

        $.ajax({
            url: "<?php echo admin_url('admin-ajax.php'); ?>",
            type: 'POST',
            dataType: 'json',
            data: {
                action: 'filter_events',
                category: category,
                month: month,
                year: year,
                tag: currentTagName,
                page: fetchPast ? 'past' : currentPage, // Send 'past' if fetching past events
                fetchPast: fetchPast // This will be either true or false
            },
            success: function(response) {
                hasPastEvents = response.has_past_events;
                moreEvents = response.more_events;

                if (!fetchPast) { // If not fetching past, update current page
                    currentPage = response.current_page;
                } else { // If fetched past events, reset the flag
                    fetchingPast = false;
                }

                $('.tribe-events-calendar-list tbody').html(response.html);
                
                // If 'more_events' is provided in the response, use it to set button state
                if (response.hasOwnProperty('more_events')) {
                    $('#next_events_button').prop('disabled', !response.more_events);
                } else {
                    // Log an error if 'more_events' is not provided
                    console.error("'more_events' not provided in response");
                }
                
                // Assign totalPages and currentPage if they are provided in the response
                if (response.hasOwnProperty('total_pages')) {
                    totalPages = response.total_pages;
                } else {
                    // Log an error if 'total_pages' is not provided
                    console.error("'total_pages' not provided in response");
                }

                if (response.hasOwnProperty('current_page')) {
                    currentPage = response.current_page;
                } else {
                    // Log an error if 'current_page' is not provided
                    console.error("'current_page' not provided in response");
                }
                updateButtonStates(); // Update the button states after fetching events
            },


            error: function() {
                $('.tribe-events-calendar-list tbody').html('<tr><td colspan="5">Unable to fetch events. Please try again later.</td></tr>');
                fetchingPast = false; // Reset fetching past flag in case of error
                updateButtonStates();
            }
        });
    }

    function clearFilters() {
        // Reset the native select box to its placeholder option
        $('#event_category').val($('#default_option').val());
        
        // Update the custom dropdown text to the placeholder text
        $('.custom-select').text('Type of Meeting').append('  â–¼');
        
        // Clear the selected month and year and then fetch events
        clearSelection();
        currentPage = 1;
        totalPages = undefined;
        fetchEvents(currentPage);
        updateButtonStates();
    }


    $('#filter_events_button').on('click', function() {
        fetchEvents(currentPage);
    });
    $('#clear_filters_button').on('click', clearFilters);
    $('#prev_events_button').on('click', function() {
        if (currentPage === 1 && hasPastEvents) {
            // Send a flag to indicate we're fetching past events
            fetchEvents(currentPage, true); // Pass 'true' as the second parameter to fetch past events
        } else if (currentPage > 1) {
            fetchEvents(currentPage - 1); // Fetch the previous page of current/future events
        }
    });

    // Event handler for the "Next" button
    $('#next_events_button').on('click', function() {
        // Assuming you have a way to determine if there is a next page
        // For example, using a global variable updated with the AJAX response
        if (totalPages === undefined || currentPage < totalPages) {
            fetchEvents(currentPage + 1);
        }
    });

    // Initial fetch of events
    fetchEvents(currentPage);
    updateButtonStates();
});
</script>


<!----Style for dropdowm----->
<script>
document.addEventListener('DOMContentLoaded', () => {
    const select = document.querySelector('.select-wrapper select');
    const wrapper = document.querySelector('.select-wrapper');
    select.style.display = 'none'; // Hide the original select

    // Create custom dropdown
    const customDropdown = document.createElement('div');
    Object.assign(customDropdown.style, {
        position: 'relative',
        width: '100%',
        maxWidth: '200px',
        padding: '8px 12px',
        margin: '0 10px',
        backgroundColor: '#fff',
        border: '1px solid #ccc',
        borderRadius: '5px',
        fontSize: '16px',
        color: '#919ba7',
        cursor: 'pointer',
        fontWeight: '600'
    });
    customDropdown.className = 'custom-select';
    customDropdown.textContent = select.options[select.selectedIndex].textContent;
    wrapper.appendChild(customDropdown);

    // Create and style the dropdown list
    const dropdownList = document.createElement('ul');
    Object.assign(dropdownList.style, {
        listStyle: 'none',
        margin: '0 10px',
        padding: '0',
        position: 'absolute',
        zIndex: '1000',
        width: '100%',
        maxWidth: '200px',
        boxShadow: '0 8px 16px rgba(0,0,0,0.2)',
        display: 'none',
        borderRadius: '4px'
    });
    wrapper.appendChild(dropdownList);

    // Populate dropdown list
    Array.from(select.options).forEach((option, index) => {
        if (index === 0) return; // Skip placeholder
        const listItem = document.createElement('li');
        Object.assign(listItem.style, {
            padding: '8px 12px',
            cursor: 'pointer',
            backgroundColor: '#fff',
            fontWeight: 'bold',
            transition: 'background-color 0.2s, color 0.2s'
        });
        listItem.textContent = option.textContent;

        // Hover effects
        listItem.addEventListener('mouseover', () => {
            listItem.style.backgroundColor = '#007bff';
            listItem.style.color = '#fff';
        });
        listItem.addEventListener('mouseout', () => {
            listItem.style.backgroundColor = '#fff';
            listItem.style.color = '#4D4D4D';
        });

        // Select option and close dropdown
        listItem.addEventListener('click', () => {
            select.value = option.value;
            customDropdown.textContent = option.textContent;
            dropdownList.style.display = 'none';
            select.dispatchEvent(new Event('change'));
        });

        dropdownList.appendChild(listItem);
    });

    // Toggle dropdown display
    customDropdown.addEventListener('click', () => {
        dropdownList.style.display = dropdownList.style.display === 'none' ? 'block' : 'none';
    });

    // Close dropdown when clicking outside
    document.addEventListener('click', (e) => {
        if (!wrapper.contains(e.target)) {
            dropdownList.style.display = 'none';
        }
    });
});
</script>